DEFINE ipset requestip = { *.*.*.*:* };
DEFINE ipset serverip = { 127.0.0.1:9999, 127.0.0.1:66110 };
//nel linguaggio sono implementate strutture dati con costo di accesso "costante"
//non posso scrivere, ad esempio: 12*.1.*.4*:9*: costo di matching non lineare)

//DEFINE ipset altri_server = { 192.168.*.*:8080, 160.*.*.*:80 };
//non è consentito: 1*.

//insiemi di stringhe

//DEFINE set stringhe = {"ahsgf", "sdkjfhsk", "sdjfhskjhdf", "khsdgfhsd"};
//è una struttura dati con costo di ricerca indipendente dalla numerosità

//Gli insiemi di url seguono lo stesso modello degli ip
//Con * posso sostituire una pagina ma non parte del nome della pagina
//DEFINE urlset lemieurl = { /pagina1/*, /pagina2/pag3/pag4/* }

(*
- Gli insiemi disponibili sono:
	- set: insieme di stringhe
	- ipset: insieme di indirizzi ip e porte
	- urlset: insieme di url
*)

(* Commenta un blocco di codice *)
//commenta una linea di codice

//le AR, regole di accesso, operano sulla comunicazione intercettata dall'observer
//possono redirigerla, bloccarla, effettuare sostituzioni... esattamente come 
//un reverse proxy (e più)

DEFINE AR AR1  //questa opera in serie sulla comunicazione
	CONDITION
		net.ipdst is in requestip
	ACTION
		tcp.redirect "127.0.0.1:9999"  //porta su cui è in ascolto http-server
	;

//opera sulle "Observation" inviate dall'agente di osservazione
DEFINE urlset elenco_url_tracciate = { /esempio.scm, /a.out,
/sdc_14042020.conf };

DEFINE VR "La prima regola di validazione"
	CONDITION
		net.ipsrc is in serverip
		//net.ipdst is in requestip
		//! net.ipsrc is in serverip next net.ipdst is in requestip
		//HTTP.URL is in elenco_url_tracciate
	ACTION
		REPORT report2 {
			http.host, http.method, http.uri, http.answer.code
		}
	;